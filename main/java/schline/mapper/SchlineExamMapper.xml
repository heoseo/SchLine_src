<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="schline.SchlineDAOImpl">

	<!-- 과목인덱스로 과목명 가져오기 -->
	<select id="getsubjectName" resultType="schline.ClassDTO">
		SELECT subject_name FROM subject_tb WHERE subject_idx = #{0}
	</select>
	<!-- 유저아이디로 유저이름 가져오기 -->
	<select id="getuserName" resultType="schline.UserVO">
		SELECT user_name, user_id FROM user_tb WHERE user_id = #{0}
	</select>
	<!-- 가장 낮은 인덱스 하나만 가져오기...추후 플래그 자동입력시 필요없음 -->
	<select id="getExamidx" resultType="Integer">
		SELECT min(exam_idx) from exam_tb WHERE subject_idx = #{0} AND exam_type = #{1}
	</select>
	<!-- 과목의 시험,과제 정보 가져오기 -->
	<select id="getExamidxs" resultType="Integer">
		SELECT exam_idx from exam_tb WHERE subject_idx = #{0} AND exam_type = #{1} AND exam_idx = #{2}
	</select>
	<select id="getExamlist" resultType="schline.ExamDTO">
		select * from exam_tb where subject_idx=#{0} AND exam_type=#{1} order by exam_idx asc
	</select>
	<!-- 과제,시험 플래그 -->
	<select id="getCheck" resultType="int">
		SELECT check_flag FROM examcheck_tb WHERE exam_idx = #{0} AND user_id = #{1}
	</select>
	
	<!-- 시험문제리스트 가져오기(랜덤으로..) 문항수 10개(난이도2 5개 난이도3 5개)로 설정 -->
	<select id="examlist" resultType="schline.ExamDTO" parameterType="java.util.Map">
		select * from (SELECT Tb.*, ROWNUM rNum FROM
			(
	    	SELECT * FROM question_tb WHERE question_score=3 AND exam_idx IN
	    	<foreach collection="examidxs" item="idx" open="(" close=")" separator=",">
	    		#{idx}
	    	</foreach>
	    	ORDER BY DBMS_RANDOM.RANDOM
	    	) Tb
	    WHERE ROWNUM <![CDATA[<=]]> 6 
		UNION
		SELECT Tb.*, ROWNUM rNum FROM
			(
	    	SELECT * FROM question_tb WHERE question_score=2 AND exam_idx IN
 		    <foreach collection="examidxs" item="idx" open="(" close=")" separator=",">
	    		#{idx}
	    	</foreach>
	    	ORDER BY DBMS_RANDOM.RANDOM
	    	)Tb 
	    WHERE ROWNUM <![CDATA[<=]]> 6) order by DBMS_RANDOM.RANDOM
	
		<!-- SELECT * FROM(SELECT * FROM exam_tb E 
    		INNER JOIN question_tb Q ON E.exam_idx=Q.exam_idx
			WHERE exam_type=#{0} AND subject_idx=#{1} ORDER BY DBMS_RANDOM.RANDOM)
		WHERE ROWNUM <![CDATA[<=]]>10 -->

	</select>
	<!-- 객관식문제의 문항번호와 내용 가져오기 -->
	<select id="questionlist" resultType="schline.ExamDTO">
		SELECT * FROM questionlist_tb
	</select>
	
	<!-- 주관식 입력값 저장 -->
	<insert id="insertAnswer">
		INSERT INTO questionanswer_tb
			(questionanswer_idx, question_idx, user_id, questionanswer_content)
		VALUES
			(seq_questionanswer_idx.NEXTVAL, #{0}, #{1}, #{2})
	</insert>
	
	<!-- 과제 리스트 가져오기(학생) -->
	<select id="tasklist" resultType="schline.ExamDTO">
		SELECT * FROM exam_tb E
	    JOIN examcheck_tb C ON E.exam_idx=C.exam_idx
		WHERE exam_type=#{0} AND subject_idx=#{1} AND user_id=#{2}
	</select>	
	
	<!-- 배점을 위한 idx 및 점수를 가져오는 쿼리 -->
	<select id="scoringList" resultType="schline.ExamDTO">
		SELECT * FROM question_tb
	</select>
	
	<select id="getExam" resultType="schline.ExamDTO">
		SELECT * FROM exam_tb WHERE subject_idx=#{0} AND exam_idx=#{1}
	</select>
	
	<select id="getView" resultType="schline.ExamBoardDTO">
		SELECT * FROM board_tb WHERE board_idx=#{0}
	</select>
	
	<!-- 개인 과제물 작성(업로드) -->
	<insert id="taskWrite">
		INSERT INTO board_tb
			(board_idx, subject_idx, board_type, user_id, board_title,
			 board_content, board_file, exam_idx)
		VALUES
			(seq_board_idx.NEXTVAL, #{_subject_idx}, 'exam', #{_user_id}, #{_board_title},
			 #{_board_content}, #{_board_file}, #{_exam_idx}) 
	</insert>
	
	<!-- 팀번호 가져오기 -->
	<select id="getTeamNum" resultType="string">
	 SELECT team_idx FROM teamproject_tb WHERE user_id=#{0} AND subject_idx=#{1}
	</select>
	
	
	<!-- 협업 게시물 수 카운트 -->
	<select id="getTotalCount" resultType="int">
		SELECT count(*) from board_tb B where 
		subject_idx=#{0} AND team_num=#{1}
	</select>
	
	<!-- 협업 리스트 받아오기 -->
	<select id="teamList" resultType="schline.ExamBoardDTO">
	SELECT * FROM (
		SELECT Tb.*, rownum rNum FROM (
			SELECT * FROM board_tb B where 
			subject_idx=#{0} AND team_num=#{1} ORDER BY board_idx DESC
			) Tb
		)
		WHERE rNum<![CDATA[>=]]>#{2} AND rNum<![CDATA[<=]]>#{3}
	</select>
	
	<select id="teamList2" resultType="schline.ExamBoardDTO">
		SELECT B.*, user_name FROM board_tb B 
		join user_tb U on B.user_id = U.user_id
		where subject_idx=#{0} AND team_num=#{1} ORDER BY board_idx DESC
	</select>
	
	<!-- 팀 게시판 작성(일반게시물or과제물업로드) -->
	<insert id="teamWrite">
		INSERT INTO board_tb
			(board_idx, subject_idx, board_type, user_id, board_title,
			 board_flag_te, board_content, board_file, team_num)
		VALUES
			(seq_board_idx.NEXTVAL, #{_subject_idx}, 'team', #{_user_id}, #{_board_title},
			 'Y', #{_board_content}, #{_board_file}, #{_team_num}) 
	</insert>
	
	<!-- 협업게시판 게시물 수정 -->
	<update id="teamEdit">
		UPDATE board_tb SET board_title=#{1}, board_content=#{2}
		WHERE board_idx=#{0}
	
	</update>
	<!-- 협업게시판 게시물(파일변경) 수정 -->
	<update id="teamFileEdit">
		UPDATE board_tb SET board_title=#{_board_title},
			board_content=#{_board_content}, board_file=#{_board_file}
		WHERE board_idx = #{_board_idx}
	</update>
	
	<!-- 협업게시판 게시물 삭제 -->
	<delete id="teamDelete">
		DELETE FROM board_tb WHERE board_idx = #{0} AND user_id=#{1}
	</delete>
	
	<!-- 과제 및 시험 체크수정 -->
	<update id="checkEdit">
		UPDATE examcheck_tb SET check_flag= 1 WHERE exam_idx=#{0} AND user_id=#{1}
	</update>

	<!-- 통합과제함 리스트 가져오기 -->
	<select id="getAllTask" resultType="schline.ExamDTO">
		SELECT * FROM exam_tb E
    		JOIN subject_tb S on E.subject_idx = S.subject_idx
			WHERE exam_type=1 AND E.subject_idx IN (
   		SELECT subject_idx FROM registration_tb	WHERE user_id=#{0})
	</select>
</mapper>