<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="schline.SchlineDAOImpl">
	<!-- 해당 아이디의 과목으로 출제한 문제리스트 가져오기 -->
	<select id="pexamList" resultType="schline.ExamDTO">
		SELECT * FROM exam_tb E
    	JOIN question_tb Q ON E.exam_idx= Q.exam_idx  WHERE Q.exam_idx in
		(SELECT exam_idx FROM exam_tb WHERE subject_idx =
    	(SELECT subject_idx FROM subject_tb WHERE user_id=#{0}))
	</select>
	<!-- 객관식문제의 문항번호와 내용 가져오기 -->
	<select id="pquestionlist" resultType="schline.ExamDTO">
		SELECT * FROM questionlist_tb WHERE question_idx IN
		(SELECT question_idx FROM question_tb WHERE exam_idx IN
		(SELECT exam_idx FROM exam_tb WHERE subject_idx =
    	(SELECT subject_idx FROM subject_tb WHERE user_id=#{0})))
	</select>
	
	<!-- 과제리스트 가져오기 -->
	<select id="ptasklist" resultType="schline.ExamDTO">
		SELECT * FROM exam_tb WHERE exam_type=#{0} AND subject_idx=#{1}
	</select>
	
	<!-- 담당과목idx 가져오기 -->
	<select id="getSubject_idx" resultType="string">
		SELECT subject_idx FROM subject_tb WHERE user_id=#{0}
	</select>

	<!-- 시험정보 입력 -->
	<insert id="insertExam">
		INSERT INTO exam_tb (exam_idx, subject_idx, exam_name, exam_date, exam_type, exam_content, exam_scoring)
		VALUES (seq_exam_idx.NEXTVAL, #{0}, #{1}, to_date(#{2}, 'mm/dd/yyyy'), 2, #{1}, #{3})
	</insert>
	<!-- 문제정보 입력 -->
	<insert id="insertQuestion">
		INSERT INTO question_tb (question_idx, exam_idx, question_type, answer, question_score, question_content)
		VALUES (seq_question_idx.NEXTVAL, #{0}, #{1}, #{2}, #{3}, #{4})
	</insert>
	<insert id="insertQuestionList">
	<!-- 객관식문항정보 입력 -->
		INSERT INTO questionlist_tb (questionlist_idx, question_idx, questionlist_content, questionlist_num)
		VALUES (seq_questionlist_idx.NEXTVAL, #{0}, #{1}, #{2})
	</insert>
	<select id="getExam_idx" resultType="string">
		SELECT MAX(exam_idx) FROM exam_tb WHERE subject_idx=#{0}
	</select>
	<select id="getQuestion_idx" resultType="string">
		SELECT MAX(question_idx) FROM question_tb
	</select>
	
	<!-- 객관식문제의 경우 문항까지 /서술형인경우 자식테이블인 답변형 테이블 삭제를 위해 문제타입 받아오기 및 삭제하기 -->
	<select id="getQuestionType" resultType="string">
		SELECT question_type FROM question_tb WHERE question_idx=#{0}
	</select>
	<delete id="deleteQuestionlist">
		DELETE FROM questionlist_tb WHERE question_idx=#{0}
	</delete>
	<delete id="deleteQuestion">
		DELETE FROM question_tb WHERE question_idx=#{0}
	</delete>
	<delete id="deleteQuestionAnswer">
		DELETE FROM questionanswer_tb WHERE question_idx=#{0}
	</delete>
	
	<!-- 과제 입력 -->
	<insert id="insertTask">
		INSERT INTO exam_tb (exam_idx, subject_idx, exam_name, exam_date, exam_type, exam_content, exam_scoring)
		VALUES (seq_exam_idx.NEXTVAL, #{0}, #{1}, to_date(#{2}, 'mm/dd/yyyy'), '1', #{3}, #{4})
	</insert>
	<!-- 과제 및 시험 입력 후 해당 인덱스로.. 수강중인 학생들의 체크리스트 insert-->
	<insert id="insertCheckList" parameterType="schline.ExamDTO">
		INSERT INTO examcheck_tb VALUES
		(#{exam_idx}, #{user_id}, 0)
	</insert>
	<!-- 과제 수정 -->
	<update id="updateTask">
		UPDATE exam_tb SET exam_name=#{0}, exam_date = to_date(#{1}, 'mm/dd/yyyy'), exam_content=#{2}, exam_scoring=#{3} WHERE exam_idx=#{4}  
	</update>
	<!-- 과제 삭제 -->
	<!-- 체크리스트와 제출된 과제 게시판을 먼저 삭제해야함... -->
	<delete id="deleteExamBoard">
		DELETE FROM board_tb where exam_idx = #{0}
	</delete>
	<delete id="deleteCheckList">
		DELETE FROM examcheck_tb where exam_idx = #{0}
	</delete>
	<delete id="deleteTask">
		DELETE FROM exam_tb WHERE exam_idx = #{0} AND subject_idx = #{1}
	</delete>
	
		<!-- 제출한 과제 정보 가져오기 -->
	<select id="getTotalTask" resultType="int">
		select count(*) from board_tb where subject_idx=#{0} AND board_type='exam'	
	</select>
	<select id="taskCheckList" resultType="schline.ExamBoardDTO">
		SELECT * FROM (
			SELECT Tb.*, rownum rNum FROM (
		 		SELECT * FROM board_tb B where 
		 		subject_idx=#{0} AND board_type='exam' ORDER BY board_idx DESC
		 	) Tb
		)
		WHERE rNum<![CDATA[>=]]>#{1} AND rNum<![CDATA[<=]]>#{2}	
	</select>
	
	<!-- 주관식 답 데이터가 많아 20개만 우선 추출 -->
	<select id="examCheckList" resultType="schline.ExamDTO">
		select subject_idx, E.exam_idx, question_content, question_score, Q.question_idx, question_type, user_id, questionanswer_content
			from exam_tb E join question_tb Q on E.exam_idx=Q.exam_idx
	    	join questionanswer_tb A on Q.question_idx=A.question_idx 
	    where subject_idx=#{0} and rownum<![CDATA[<=]]>20
	</select>
	
	<update id="gradeUp">
		UPDATE grade_tb SET grade_exam=grade_exam + #{0}
		WHERE user_id =#{1} AND exam_idx=#{2}
	</update>
	
</mapper>